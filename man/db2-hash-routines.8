.TH db2-hash-routines "8" "August 2017" "db2-hash-routines 1.8" "DB2 UDFs and Stored Procedures"
.SH NAME
db2-hash-routines \- DB2 UDFs and SPs to generate and validate hashes
.SH SYNOPSIS
\fBUser Defined Functions:\fR
.PP
>>-BCRYPT--(--expression--)------------------------------------><
.PP
>>-PHP_MD5--(--expression--)-----------------------------------><
.PP
>>-APR_MD5--(--expression--)-----------------------------------><
.PP
>>-APR_CRYPT--(--expression--)---------------------------------><
.PP
>>-APR_SHA1--(--expression--)----------------------------------><
.PP
>>-APR_SHA256--(--expression--)--------------------------------><
.PP
>>-SHA256_HEX--(--expression--)--------------------------------><
.PP
>>-SHA1_HEX--(--expression--)----------------------------------><
.PP
.nf
>>-SHA256--(--expression--+---------+--)-----------------------><
                          '-,--salt-'
.fi
.PP
.nf
>>-SHA512--(--expression--+---------+--)-----------------------><
                          '-,--salt-'
.fi
.PP
>>-VALIDATE_PW--(--password--,--hash--)------------------------><
.PP
\fBStored Procedures:\fR
.PP
>>-BCRYPT--(--expression--,--hash--)---------------------------><
.PP
>>-PHP_MD5--(--expression--,--hash--)--------------------------><
.PP
>>-APR_MD5--(--expression--,--hash--)--------------------------><
.PP
>>-APR_CRYPT--(--expression--,--hash--)------------------------><
.PP
>>-APR_SHA1--(--expression--,--hash--)-------------------------><
.PP
>>-APR_SHA256--(--expression--,--hash--)-----------------------><
.PP
>>-SHA256_HEX--(--expression--,--hash--)-----------------------><
.PP
>>-SHA1_HEX--(--expression--,--hash--)-------------------------><
.PP
.nf
>>-SHA256--(--expression--+---------+--,--hash--)--------------><
                          '-,--salt-'
.fi
.PP
.nf
>>-SHA512--(--expression--+---------+--,--hash--)--------------><
                          '-,--salt-'
.fi
.PP
>>-VALIDATE_PW--(--password--,--hash--,--is_valid--)-----------><
.SH DESCRIPTION
These functions and procedures can be used to generate hashes in DB2.
.TP
\fBbcrypt( '\fR\fIcleartext\fR\fB' )\fR
.RS 0
\fBbcrypt( '\fR\fIcleartext\fR\fB', \fR\fI:hash\fR\fB )\fR
.PD 0
.IP
bcrypt algorithm. The bcrypt routine is compatible to the function used in Apache's htpasswd utility.
.PD
.IP
The argument can be a character string that is either a CHAR or VARCHAR not exceeding 4096 bytes.
.IP
The result of the routine is CHAR(60). The result can be null; if the argument is null, the result is the null value.
.TP
\fBphp_md5( '\fR\fIcleartext\fR\fB' )\fR
.RS 0
\fBphp_md5( '\fR\fIcleartext\fR\fB', \fR\fI:hash\fR\fB )\fR
.PD 0
.IP
MD5 hash. The php_md5 routine is compatible to the PHP md5 function.
.PD
.IP
The argument can be a character string that is either a CHAR or VARCHAR not exceeding 4096 bytes.
.IP
The result of the routine is CHAR(32). The result can be null; if the argument is null, the result is the null value.
.TP
\fBapr_md5( '\fR\fIcleartext\fR\fB' )\fR
.RS 0
\fBapr_md5( '\fR\fIcleartext\fR\fB', \fR\fI:hash\fR\fB )\fR
.PD 0
.IP
Seeded MD5 hash. The apr_md5 routine is compatible to the function used in Apache's htpasswd utility.
.PD
.IP
The argument can be a character string that is either a CHAR or VARCHAR not exceeding 4096 bytes.
.IP
The result of the routine is CHAR(37). The result can be null; if the argument is null, the result is the null value.
.TP
\fBapr_crypt( '\fR\fIcleartext\fR\fB' )\fR
.RS 0
\fBapr_crypt( '\fR\fIcleartext\fR\fB', \fR\fI:hash\fR\fB )\fR
.PD 0
.IP
Unix crypt. The apr_crypt routine is compatible to the function used in Apache's htpasswd utility.
.PD
.IP
The argument can be a character string that is either a CHAR or VARCHAR not exceeding 4096 bytes.
.IP
The result of the routine is CHAR(13). The result can be null; if the argument is null, the result is the null value.
.TP
\fBapr_sha1( '\fR\fIcleartext\fR\fB' )\fR
.RS 0
\fBapr_sha1( '\fR\fIcleartext\fR\fB', \fR\fI:hash\fR\fB )\fR
.PD 0
.IP
SHA1 algorithm. The apr_sha1 routine is compatible to the function used in Apache's htpasswd utility.
.PD
.IP
The argument can be a character string that is either a CHAR or VARCHAR not exceeding 4096 bytes.
.IP
The result of the routine is CHAR(33). The result can be null; if the argument is null, the result is the null value.
.TP
\fBapr_sha256( '\fR\fIcleartext\fR\fB' )\fR
.RS 0
\fBapr_sha256( '\fR\fIcleartext\fR\fB', \fR\fI:hash\fR\fB )\fR
.PD 0
.IP
SHA256 algorithm. The apr_sha256 routine returns the identifier {SHA256} plus the base64 encoded sha256 hash.
.PD
.IP
The argument can be a character string that is either a CHAR or VARCHAR not exceeding 4096 bytes.
.IP
The result of the routine is CHAR(52). The result can be null; if the argument is null, the result is the null value.
.TP
\fBsha256_hex( '\fR\fIcleartext\fR\fB' )\fR
.RS 0
\fBsha256_hex( '\fR\fIcleartext\fR\fB', \fR\fI:hash\fR\fB )\fR
.PD 0
.IP
SHA256 algorithm. The sha256_hex routine returns a 64-character hexadecimal hash.
.PD
.IP
The argument can be a character string that is either a CHAR or VARCHAR not exceeding 4096 bytes.
.IP
The result of the routine is CHAR(64). The result can be null; if the argument is null, the result is the null value.
.TP
\fBsha1_hex( '\fR\fIcleartext\fR\fB' )\fR
.RS 0
\fBsha1_hex( '\fR\fIcleartext\fR\fB', \fR\fI:hash\fR\fB )\fR
.PD 0
.IP
SHA1 algorithm. The sha1_hex routine returns a 40-character hexadecimal hash.
.PD
.IP
The argument can be a character string that is either a CHAR or VARCHAR not exceeding 4096 bytes.
.IP
The result of the routine is CHAR(40). The result can be null; if the argument is null, the result is the null value.
.TP
\fBsha256( '\fR\fIcleartext\fR\fB' [, '\fR\fIsalt\fR\fB'] )\fR
.RS 0
\fBsha256( '\fR\fIcleartext\fR\fB' [, '\fR\fIsalt\fR\fB'], \fR\fI:hash\fR\fB )\fR
.PD 0
.IP
SHA256 algorithm. The sha256 routine returns a glibc2's crypt hash. If the system's crypt does not support sha-256,
an SQLSTATE 39702 is returned.
.PD
.IP
The argument can be a character string that is either a CHAR or VARCHAR not exceeding 4096 bytes.
An optional salt can be specified, which must be a eight-character string chosen from the set [a\(enzA\(enZ0\(en9./]. If the salt is not exactly eight characters long, an SQLSTATE 39703 is returned. If the salt contains invalid characters, an SQLSTATE 39704 is returned.
.IP
The result of the function is CHAR(55). The result can be null; if one of the arguments is null, the result is the null value.
.TP
\fBsha512( '\fR\fIcleartext\fR\fB' [, '\fR\fIsalt\fR\fB'] )\fR
.RS 0
\fBsha512( '\fR\fIcleartext\fR\fB' [, '\fR\fIsalt\fR\fB'], \fR\fI:hash\fR\fB )\fR
.PD 0
.IP
SHA512 algorithm. The sha512 routine returns a glibc2's crypt hash. If the system's crypt does not support sha-512,
an SQLSTATE 39702 is returned.
.PD
.IP
The argument can be a character string that is either a CHAR or VARCHAR not exceeding 4096 bytes.
An optional salt can be specified, which must be a eight-character string chosen from the set [a\(enzA\(enZ0\(en9./]. If the salt is not exactly eight characters long, an SQLSTATE 39703 is returned. If the salt contains invalid characters, an SQLSTATE 39704 is returned.
.IP
The result of the routine is CHAR(98). The result can be null; if one of the arguments is null, the result is the null value.
.TP
\fBvalidate_pw( '\fR\fIpassword\fR\fB', '\fR\fIhash\fR\fB' )\fR
.RS 0
\fBvalidate_pw( '\fR\fIpassword\fR\fB', '\fR\fIhash\fR\fB', \fR\fI:is_valid\fR\fB )\fR
.PD 0
.IP
This routine can be used to validate a password against a hash.
.PD
.IP
The two input arguments can be character strings that are either a CHAR or VARCHAR not exceeding 4096 bytes (password) and 120 bytes (hash). The second parameter (hash) must not be empty, otherwise an SQLSTATE 39701 is returned.
.IP
The result of the routine is an INTEGER. If the password is valid, 1 is returned. If the password is not valid, 0 is returned. The result can be null; if the argument is null, the result is the null value.
.SH EXAMPLES
\fBbcrypt (1):\fR
.br
Inserting the user \fItest\fR and the sha1 crypted clear text \fItestpwd\fR to the table \fIusers\fR.
.PP
.nf
INSERT INTO USERS (username, password)
  VALUES ('test', bcrypt('testpwd'))
.fi
.PP
\fBbcrypt (2):\fR
.br
.nf
SELECT bcrypt('testpwd') FROM SYSIBM.SYSDUMMY1

1
------------------------------------------------------------
$2y$05$2jb66aPElSkNLT1t8e6dQepuCY2BP3JnYUh0xeV9r1PEoOGyOLkym

  1 record(s) selected.
.fi
.PP
\fBbcrypt (3):\fR
.br
.nf
CALL bcrypt('testpwd', ?)

  Value of output parameters
  --------------------------
  Parameter Name  : HASH
  Parameter Value : $2y$05$WYSu1X6PVA0Ra.aPSjrdv.S6hOp.AYSnNRT521rmLRjD4Mj9UY6ve

  Return Status = 0
.fi
.PP
\fBphp_md5 (1)\fR
.br
Inserting the user \fItest\fR and the md5 hash of the clear text \fItestpwd\fR to the table \fIusers\fR.
.PP
.nf
INSERT INTO USERS (username, password)
  VALUES ('test', md5('testpwd'))
.fi
.PP
\fBphp_md5 (2)\fR
.br
.nf
SELECT php_md5( 'testpwd' ) FROM SYSIBM.SYSDUMMY1

1
--------------------------------
342df5b036b2f28184536820af6d1caf

  1 record(s) selected.
.fi
.PP
\fBphp_md5 (3)\fR
.br
.nf
CALL php_md5('testpwd', ?)

  Value of output parameters
  --------------------------
  Parameter Name  : HASH
  Parameter Value : 342df5b036b2f28184536820af6d1caf

  Return Status = 0
.fi
.PP
\fBapr_md5 (1)\fR
.br
Inserting the user \fItest\fR and the seeded md5 hash of the clear text
.br
\fItestpwd\fR to the table \fIusers\fR.
.PP
.nf
INSERT INTO USERS (username, password)
  VALUES ('test', apr_md5('testpwd'))
.fi
.PP
\fBapr_md5 (2)\fR
.br
.nf
SELECT apr_md5('testpwd') FROM SYSIBM.SYSDUMMY1

1
-------------------------------------
$apr1$HsTNH...$bmlPUSoPOF/Qhznl.sAq6/

  1 record(s) selected.
.fi
.PP
\fBapr_md5 (3)\fR
.br
.nf
CALL apr_md5('testpwd', ?)

  Value of output parameters
  --------------------------
  Parameter Name  : HASH
  Parameter Value : $apr1$HsTNH...$bmlPUSoPOF/Qhznl.sAq6/

  Return Status = 0
.fi
.PP
\fBapr_crypt (1)\fR
.br
Inserting the user \fItest\fR and the crypted clear text \fItestpwd\fR to the table \fIusers\fR.
.PP
.nf
INSERT INTO USERS (username, password)
  VALUES ('test', apr_crypt('testpwd'))
.fi
.PP
\fBapr_crypt (2)\fR
.br
.nf
SELECT apr_crypt('testpwd') FROM SYSIBM.SYSDUMMY1

1
-------------
cqs7uOvz8KBlk

  1 record(s) selected.
.fi
.PP
\fBapr_crypt (3)\fR
.br
.nf
CALL apr_crypt('testpwd', ?)

  Value of output parameters
  --------------------------
  Parameter Name  : HASH
  Parameter Value : cqs7uOvz8KBlk

  Return Status = 0
.fi
.PP
\fBapr_sha1 (1)\fR
.br
Inserting the user \fItest\fR and the sha1 crypted clear text \fItestpwd\fR to the table \fIusers\fR.
.PP
.nf
INSERT INTO USERS (username, password)
  VALUES ('test', apr_sha1('testpwd'))
.fi
.PP
\fBapr_sha1 (2)\fR
.br
.nf
SELECT apr_sha1( 'testpwd' ) FROM SYSIBM.SYSDUMMY1

1
---------------------------------
{SHA}mO8HWOaqxvmp4Rl1SMgZC3LJWB0=

  1 record(s) selected.
.fi
.PP
\fBapr_sha1 (3)\fR
.br
.nf
CALL apr_sha1('testpwd', ?)

  Value of output parameters
  --------------------------
  Parameter Name  : HASH
  Parameter Value : {SHA}mO8HWOaqxvmp4Rl1SMgZC3LJWB0=

  Return Status = 0
.fi
.PP
\fBapr_sha256 (1):\fR
.br
Inserting the user \fItest\fR and the sha256 crypted clear text \fItestpwd\fR to the table \fIusers\fR.
.PP
.nf
INSERT INTO USERS (username, password)
  VALUES ('test', apr_sha256('testpwd'))
.fi
.PP
\fBapr_sha256 (2):\fR
.br
.nf
SELECT apr_sha256('testpwd') FROM SYSIBM.SYSDUMMY1

1
----------------------------------------------------
{SHA256}qFtqIIE8Maixs/NhjaeWJxyaopOz+AmHMFOyGuxQEIc=

  1 record(s) selected.
.fi
.PP
\fBapr_sha256 (3):\fR
.br
.nf
CALL apr_sha256('testpwd', ?)

  Value of output parameters
  --------------------------
  Parameter Name  : HASH
  Parameter Value : {SHA256}qFtqIIE8Maixs/NhjaeWJxyaopOz+AmHMFOyGuxQEIc=

  Return Status = 0
.fi
.PP
\fBsha256_hex(1):\fR
.br
Inserting the user \fItest\fR and the sha256 crypted clear text \fItestpwd\fR to the table \fIusers\fR.
.PP
.nf
INSERT INTO USERS (username, password)
  VALUES ('test', sha256_hex('testpwd'))
.fi
.PP
\fBsha256_hex(2):\fR
.br
.nf
SELECT sha256_hex('testpwd') FROM SYSIBM.SYSDUMMY1

1
----------------------------------------------------------------
a85b6a20813c31a8b1b3f3618da796271c9aa293b3f809873053b21aec501087

  1 record(s) selected.
.fi
.PP
\fBsha256_hex(3):\fR
.br
.nf
CALL sha256_hex('testpwd', ?)

  Value of output parameters
  --------------------------
  Parameter Name  : HASH
  Parameter Value : a85b6a20813c31a8b1b3f3618da796271c9aa293b3f809873053b21aec501087

  Return Status = 0
.fi
.PP
\fBsha1_hex(1):\fR
.br
Inserting the user \fItest\fR and the sha1 crypted clear text \fItestpwd\fR to the table \fIusers\fR.
.PP
.nf
INSERT INTO USERS (username, password)
  VALUES ('test', sha1_hex('testpwd'))
.fi
.PP
\fBsha1_hex(2):\fR
.br
.nf
SELECT sha1_hex('testpwd') FROM SYSIBM.SYSDUMMY1

1
----------------------------------------
98ef0758e6aac6f9a9e1197548c8190b72c9581d

  1 record(s) selected.
.fi
.PP
\fBsha1_hex(3):\fR
.br
.nf
CALL sha1_hex('testpwd', ?)

  Value of output parameters
  --------------------------
  Parameter Name  : HASH
  Parameter Value : 98ef0758e6aac6f9a9e1197548c8190b72c9581d

  Return Status = 0
.fi
.PP
\fBsha256 (1):\fR
.br
Inserting the user \fItest\fR and the sha256 crypted clear text \fItestpwd\fR to the table \fIusers\fR.
.PP
.nf
INSERT INTO USERS (username, password)
  VALUES ('test', sha256('testpwd'))
.fi
.PP
\fBsha256 (2):\fR
.br
.nf
SELECT sha256('testpwd') FROM SYSIBM.SYSDUMMY1

1
-------------------------------------------------------
$5$S.LqPR7Z$273zPncMdmJ0dE1WdLldWVBmaHSDUDl8/tW8At8Hc0A

  1 record(s) selected.
.fi
.PP
\fBsha256 (3):\fR
.br
.nf
CALL sha256('testpwd', ?)

  Value of output parameters
  --------------------------
  Parameter Name  : HASH
  Parameter Value : $5$vSDCZr2d$rfh.aDopE5l3lm26AwwcIYnuVdV7/9QBACWukqYyV3/

  Return Status = 0
.fi
.PP
\fBsha256 (4):\fR
.br
.nf
SELECT sha256('testpwd', '12345678') FROM SYSIBM.SYSDUMMY1

1
-------------------------------------------------------
$5$12345678$.oVAnOr/.FK8fYNiFPvoXPQvEOT9Calecygw6K9wIb9

  1 record(s) selected.
.fi
.PP
\fBsha256 (5):\fR
.br
.nf
CALL sha256('testpwd', '12345678', ?)

  Value of output parameters
  --------------------------
  Parameter Name  : HASH
  Parameter Value : $5$12345678$.oVAnOr/.FK8fYNiFPvoXPQvEOT9Calecygw6K9wIb9

  Return Status = 0
.fi
.PP
\fBsha512 (1):\fR
.br
Inserting the user \fItest\fR and the sha512 crypted clear text \fItestpwd\fR to the table \fIusers\fR.
.PP
.nf
INSERT INTO USERS (username, password)
  VALUES ('test', sha512('testpwd'))
.fi
.PP
\fBsha512 (2):\fR
.br
.nf
SELECT sha512('testpwd') FROM SYSIBM.SYSDUMMY1

1
--------------------------------------------------------------------------------------------------
$6$cD33haq7$dl.RqEaLamlesTPVzSIQr4N1MY3BsVZ76VS8qNte0IOIWO2XorMg8U797KKOFGmX8dJhT3WuF6p17HmvvoQ6Q/

  1 record(s) selected.
.fi
.PP
\fBsha512 (3):\fR
.br
.nf
CALL sha512('testpwd', ?)

  Value of output parameters
  --------------------------
  Parameter Name  : HASH
  Parameter Value : $6$1W.m9JN1$Dh.VPl7vy.igGaeDUdDWw6ZlD0xufwDWm0ukpOYknPtdjxiSM2yzWBkzHffalb/2axNHPqEi9UUzXUbSm4LGa/

  Return Status = 0
.fi
.PP
\fBsha512 (4):\fR
.br
.nf
SELECT sha512('testpwd', '12345678') FROM SYSIBM.SYSDUMMY1

1
--------------------------------------------------------------------------------------------------
$6$12345678$tlHrypdWTz6FqubBpgL/ePlxr4lZuQ8OK1zfV6zWUmGJSz.5kGWwQGjg69Qm1Bm3.DvILruqA61o3EHsxSoko1

  1 record(s) selected.
.fi
.PP
\fBsha512 (5):\fR
.br
.nf
CALL sha512('testpwd', '12345678', ?)

  Value of output parameters
  --------------------------
  Parameter Name  : HASH
  Parameter Value : $6$12345678$tlHrypdWTz6FqubBpgL/ePlxr4lZuQ8OK1zfV6zWUmGJSz.5kGWwQGjg69Qm1Bm3.DvILruqA61o3EHsxSoko1

  Return Status = 0
.fi
.PP
\fBvalidate_pw (1)\fR
.br
Validating the password \fItestpwd\fR against the crypt hash \fIcqs7uOvz8KBlk\fR.
.PP
.nf
SELECT validate_pw('testpwd', 'cqs7uOvz8KBlk') FROM SYSIBM.SYSDUMMY1"

1
-----------
          1

  1 record(s) selected.
.fi
.PP
\fBvalidate_pw (2)\fR
.br
.nf
CALL validate_pw('testpwd', 'cqs7uOvz8KBlk', ?)

  Value of output parameters
  --------------------------
  Parameter Name  : IS_VALID
  Parameter Value : 1

  Return Status = 0
.fi
.PP
\fBvalidate_pw (3)\fR
.br
.nf
CALL validate_pw('testpwd', '0123456789abcdef', ?)

  Value of output parameters
  --------------------------
  Parameter Name  : IS_VALID
  Parameter Value : 0

  Return Status = 0
.fi
.SH AUTHOR
Written by Helmut K. C. Tessarek.
.SH "BUGS"
Hopefully none :-) But if you find one, please report it at:
.br
https://github.com/tessus/db2-hash-routines/issues
.SH "WEB SITE"
http://tessus.github.io/db2-hash-routines
